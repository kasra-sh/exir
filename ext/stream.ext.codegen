const {Extension} = require("../core/scope");
const I = require("../core/stream");
const T = require("../core/types");
// const L = require("./core/logging");

let arrObj = new Extension([Array, Object]);
// let str = new Extension([String]);
// let arrNodes = new Extension([Array, global.HTMLCollection, global.NodeList])
let iterables = new Extension([Array, String, global.HTMLCollection, global.NodeList])
let all = new Extension([Array, Object, String, global.HTMLCollection, global.NodeList])

iterables.polyfill(function item(i) {
    return I.item(this, i)
});

all.define(function $contains(x) {
    return this.$any(x);
});

all.define(function $in(x) {
    return x.$any(this)
})

all.define(function $startsWith(x) {
    return I.StartsWith(this, x)
})

all.define(function $each(func) {
    return I.ForEach(this, func);
});

all.define(function $forEach(func) {
    return I.ForEach(this, func);
});

all.define(function $loopArray(func) {
    return I.ArrayForEach(this, func);
});

all.polyfill(function $first(func) {
    return I.First(this, func);
});

all.polyfill(function $last(func) {
    return I.Last(this, func);
});

all.define(function $any(func) {
    return I.Any(this, func);
});

all.define(function $all(func) {
    return I.All(this, func);
});

all.define(function $filter(f) {
    return I.Filter(this, f);
});

all.define(function $filterRight(f) {
    return I.FilterRTL(this, f);
});

all.polyfill(function $map(f) {
    return I.Map(this, f);
});

all.polyfill(function $flatMap(f) {
    return I.FlatMap(this, f);
});

arrObj.define(function $toEnum() {
    return T.Enum(this);
});


const reqs = `const I = require("../core/stream");
const T = require("../core/types");
const L = require("../core/logging");`;
let code = reqs + all.pcode + arrObj.pcode;

module.exports = function () {
    return code
}